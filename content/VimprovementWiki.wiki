%toc Vimprovement Wiki

= summary =
Ideas (circa 2011-01-18) for the creation of an advanced techniques and best-practices for vim plugin developers.

== topics ==
* prerequisites
    - assume mastery or at least understanding or at the very least accessibility to all of the conents in the existing vim books
        - ora vi and vim
        - kim vim book
        - any other well-maintained vim information sites
        - help pages included
    - but can still cover material that we feel hasn't been given sufficent treatment by these resources, or for which updates for new techniques are essential
* managing plugins with pathogen
* managing plugins with git
* having written a function
* having written a map that calls a function
* having tinkered with an exisitng plugin
* knowing how to use vimgrep
* knowing how to use helpgrep
* knowing how to use c_Ctrl-D when issing :help command
* mastery of correct terminology
    * acceptance of vim help as authority on correct terminology
* knowing what tab-pages really are and what the common difficulties associated with them are
* knowing why mastery of buffers and window manipulation is essential for effective use of tab-pages 
* having looked at the vim codebase and run screaming away
* being afflicted with vimbiquity
    * use of vim bindings outside of vim
        * using vimperator, pentadactyl, or vimium
        * kr4mb
        * readline vi mode
        * bash fc with $FCEDITOR
        * some websites starting to use vim-like bindings
        * others?
* doing development in a particular language
    * ruby
    * python
* knowing when to use language bindings and when to stick to vimscript
    * is this a purely matter of personal judgement and taste?
    * ways in which language bindings can limit availability or adoption of a plugin
    * ways in which language bindings make it more difficult to share code
    * ways in which language bindings make it more difficult for others to understand your code
        * potentially fewer bugfix and feature contributions to your plugin
* why isn't there a sort of standard libary of higher-level vim functions
    * "gui" functions in particular
        * utility windows
        * mapping a function
* how do you choose what functions to expose as commands or for keybindings?
* when are you done?
* checklist for essential features of a plugin
* packaging a plugin
* testing a plugin
* writing unit tests in vimscript
    * sjl has had some good (if painful) experience experimenting with this for gundo.vim
* distributing a plugin
* publicizing a plugin
* where to go for help when :help isn't enough?
    * freenode #vim
    * here. :-)

== mechanics ==
* what is necessary for the contribution of materials to such a site?
* use of vimwiki
* adherence to a set of editiorial standards
    * distributed as snipMate snippets perhaps?
    * adding vimwiki configuration for this sites's files
        * can this be automated?
* clone project from github
* send pull requests to submit proposed changes, new material
* going to bypass a blog for now. this is all bootstrap.
    * just going to use the html output of vimwiki produced with a custom header, footer, and stylesheet.
    * need to have a set of solid examples on which to model any new material
* all articles should be peer reviewed
* when actual site goes live with final versions, some of these pages can be changed to redirect to those "official" versions
